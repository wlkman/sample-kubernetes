# 使用 Namespaces
# 创建
# (1) 命令行直接创建
$ kubectl create namespace new-namespace

# (2) 通过文件创建
$ cat my-namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: new-namespace

$ kubectl create -f ./my-namespace.yaml

# 删除
$ kubectl delete namespaces new-namespace
# 注意：

# 删除一个namespace会自动删除所有属于该namespace的资源。
# default和kube-system命名空间不可删除。
# PersistentVolumes是不属于任何namespace的，但PersistentVolumeClaim是属于某个特定namespace的。
# Events是否属于namespace取决于产生events的对象。

# 查看 Namespaces
# 使用以下命令列出群集中的当前的Namespace：

$ kubectl get namespaces
# NAME          STATUS    AGE
# default       Active    1d
# kube-system   Active    1d

# Kubernetes从两个初始的Namespace开始：

# default
# kube-system 由Kubernetes系统创建的对象的Namespace

# Setting the namespace for a request
# 要临时设置Request的Namespace，请使用--namespace 标志。

# 例如：

$ kubectl --namespace=<insert-namespace-name-here> run nginx --image=nginx
$ kubectl --namespace=<insert-namespace-name-here> get pods
# Setting the namespace preference
# 可以使用kubectl命令创建的Namespace可以永久保存在context中。

$ kubectl config set-context $(kubectl config current-context) --namespace=<insert-namespace-name-here>
# Validate it
$ kubectl config view | grep namespace:
# 所有对象都在Namespace中?
# 大多数Kubernetes资源（例如pod、services、replication controllers或其他）都在某些Namespace中，但Namespace资源本身并不在Namespace中。而低级别资源（如Node和persistentVolumes）不在任何Namespace中。Events是一个例外：它们可能有也可能没有Namespace，具体取决于Events的对象。

# 获取失败的 pod 的 pod 配置文件，然后查找 imagePullSecrets 部分。
kubectl get pod <pod_name> -o yaml -n contract-squad-dev

# 将每个映像拉取私钥从 default 名称空间复制到您选择的名称空间。新映像拉取私钥的名称为 <namespace_name>-icr-<region>-io。
kubectl get secret default-us-icr-io -o yaml | sed "s/default/contract-squad-dev/g" | kubectl -n contract-squad-dev create -f -
kubectl get secret default-uk-icr-io -o yaml | sed "s/default/contract-squad-dev/g" | kubectl -n contract-squad-dev create -f -
kubectl get secret default-de-icr-io -o yaml | sed "s/default/contract-squad-dev/g" | kubectl -n contract-squad-dev create -f -
kubectl get secret default-au-icr-io -o yaml | sed "s/default/contract-squad-dev/g" | kubectl -n contract-squad-dev create -f -
kubectl get secret default-jp-icr-io -o yaml | sed "s/default/contract-squad-dev/g" | kubectl -n contract-squad-dev create -f -
kubectl get secret default-icr-io -o yaml | sed "s/default/contract-squad-dev/g" | kubectl -n contract-squad-dev create -f -

# 验证私钥是否已成功创建。
kubectl get secrets -n contract-squad-dev

#将私钥contract-squad-dev-us-icr-io赋给命名空间作为镜像拉取密钥（dos命令不能使用单引号）
kubectl -n contract-squad-dev patch serviceaccount default -p '{"imagePullSecrets": [{"name": "contract-squad-dev-us-icr-io"}]}'
#windows需要转译字符
kubectl -n contract-squad-dev patch serviceaccount default -p "{\"imagePullSecrets\": [{\"name\": \"contract-squad-dev-us-icr-io\"}]}"

# 查看镜像拉取密钥是否配置成功
kubectl describe serviceaccount default -n contract-squad-test


#删除pod
kubectl delete pod esmtcwebcicd-deployment-5cf796d6c7-mwdsf -n contract-squad-dev